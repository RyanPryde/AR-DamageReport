{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"system.print(\"-------DAMAGE AR SCRIPT--------\")\nsystem.print(\"by TheGreatSardini and Jeronimo\")\nsystem.print(\"press ALT to toggle view\")\nsystem.print(\"-------------------------------------------\")\nshowFullHp = false --export\n\nelementsId = {}\nelementsLocalPos = {}\n\nfunction loadElements()\n    elementsId = core.getElementIdList()\n    for i, v in ipairs(elementsId) do\n        elementsLocalPos[i] = core.getElementPositionById(v)\n    end\nend\n\nloadElements()\nsystem.showScreen(1)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"local sqrt, tan, rad, format, concat, cos, sin, pi = math.sqrt, math.tan, math.rad, string.format, table.concat, math.cos, math.sin, math.pi\n\nlocal function round(num, numDecimalPlaces) -- http://lua-users.org/wiki/SimpleRound\n    local mult = 10^(numDecimalPlaces or 0)\n    return math.floor(num * mult + 0.5) / mult\nend            \nlocal function hexToRGB(hex)\n    hex = hex:gsub(\"#\",\"\")\n    return tonumber(\"0x\"..hex:sub(1,2)), tonumber(\"0x\"..hex:sub(3,4)), tonumber(\"0x\"..hex:sub(5,6))\nend\nlocal function RGBToHex(r,g,b)\n    r,g,b = round(r),round(g),round(b)\n    return string.format(\"#%02x%02x%02x\",r,g,b)\nend\nlocal function lerp(a,b,t)\n    return a + (b - a) * t\nend\nlocal function colorGradient(a,b,t) --Returns gradiant T of a and b hex color\n    local ar, ag, ab = hexToRGB(a)\n    local br, bg, bb = hexToRGB(b)\n    return RGBToHex(lerp(ar,br,t), lerp(ag,bg,t), lerp(ab,bb,t))\nend\n\nlocal sw = system.getScreenWidth()\nlocal sh = system.getScreenHeight()\nlocal vFov = system.getCameraVerticalFov()\nlocal near = 0.1\nlocal far = 100000000.0\nlocal aspectRatio = sh/sw\nlocal tanFov = 1.0/tan(rad(vFov)*0.5)\nlocal field = -far/(far-near)\nlocal af = aspectRatio*tanFov\nlocal nq = near*field\nlocal camWP = system.getCameraWorldPos()\nlocal camWPx, camWPy, camWPz = camWP[1], camWP[2], camWP[3]\nlocal camWF = system.getCameraWorldForward()\nlocal camWFx, camWFy, camWFz = camWF[1], camWF[2], camWF[3]\nlocal camWR = system.getCameraWorldRight()\nlocal camWRx, camWRy, camWRz = camWR[1], camWR[2], camWR[3]\nlocal camWU = system.getCameraWorldUp()\nlocal camWUx, camWUy, camWUz = camWU[1], camWU[2], camWU[3]\n\n\nlocal cWP = construct.getWorldPosition()\nlocal cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\nlocal cWOU = construct.getWorldOrientationUp()\nlocal cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\nlocal cWOF = construct.getWorldOrientationForward()\nlocal cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\nlocal cWOR = construct.getWorldOrientationRight()\nlocal cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\nlocal mPP = player.getPosition()\nlocal mPPx, mPPy = mPP[1], mPP[2]\n\n\nlocal posX, posY, posZ = 0, 0, 0\nlocal vx, vy, vz = 0, 0, 0\nlocal sx, sy, sz = 0, 0, 0\nlocal sPX, sPY = 0,0\nlocal dist = 0\n\n\nlocal function projection2D()\n    -- matrix resolution\n    vx = posX * camWRx + posY * camWRy + posZ * camWRz\n    vy = posX * camWFx + posY * camWFy + posZ * camWFz\n    vz = posX * camWUx + posY * camWUy + posZ * camWUz\n    -- 2D projection\n    sx = (af * vx)/vy\n    sy = ( -tanFov * vz)/vy\n    sz = ( -field * vy + nq)/vy\n    sPX, sPY = (sx+1)*sw*0.5, (sy+1)*sh*0.5 -- screen pos X Y\n    dist = sqrt(posX*posX + posY*posY + posZ*posZ) -- distance from camera to pos\nend\n\n\nlocal x = 0\nlocal y = 0\nlocal z = 0\nlocal vxyz = {}\nlocal vx = 0\nlocal vy = 0\nlocal vz = 0\nlocal textHeight = 0\nlocal elementsPos = {}\n\n\nfor i, v in ipairs(elementsLocalPos) do\n    vxyz = v\n    vx,vy,vz = vxyz[1], vxyz[2], vxyz[3]+ textHeight\n    x = vx * cWORx + vy * cWOFx + vz * cWOUx + cWPx\n    y = vx * cWORy + vy * cWOFy + vz * cWOUy + cWPy\n    z = vx * cWORz + vy * cWOFz + vz * cWOUz + cWPz\n    elementsPos[i] = {x=x,y=y,z=z}\nend\n\n\n\n\n--Markers\n----------\nlocal t = \"\"\nlocal style = \"labelWhite\"\nlocal fs = 50\nlocal svgT = {}\nlocal ind = 0\nlocal n1, n2, n3 = 0, 0, 0\n\nind = ind +1\nsvgT[ind] = [[<style>\nsvg {\n}\n</style><div>\n<svg viewBox=\"0 0 ]].. sw ..[[ ]].. sh ..[[\" style=\"\nposition:absolute;\ntop:0px;\nleft:0px;\nfilter: drop-shadow(1px 1px 0px black) drop-shadow(0px 0px 3px black);\n\">]]\n\nfor i, v in ipairs(elementsPos) do\n    --if debug then DUSystem.print(\"section: 91\") end\n    posX = v.x - camWPx\n    posY = v.y - camWPy\n    posZ = v.z - camWPz\n    projection2D()\n    if sz < 1 and sPX > 0 and sPX < sw and sPY > 0  and sPY < sh then\n        --if debug then DUSystem.print(\"section: 92\") end\n\n        -- set local variables --\n        local id = elementsId[i]\n        local itemId = core.getElementItemIdById(id)\n        local maxHP = core.getElementMaxHitPointsById(id); maxHP = maxHP > 0 and maxHP or 0\n        local HP = core.getElementHitPointsById(id); HP = HP > 0 and HP or 0\n\n\n        -- lives left --\n        life = \"\"\n        maxLives = core.getElementMaxRestorationsById(id)\n        lives = core.getElementRestorationsById(id)\n        if lives < maxLives then\n            life = ' ['..lives..'/'..maxLives..']'\n        end\n        coreUnit = itemId == 1417952990 or itemId == 1418170469 or itemId == 183890525 or itemId == 183890713 and 1 or 0\n\n        if HP < maxHP or showFullHp == true or (lives == 0 and coreUnit == 0) then\n            local item = system.getItem(itemId)\n            local name = item.locDisplayNameWithSize\n\n            local color = colorGradient(\"#FF4400\",\"#FFFF44\",HP/maxHP)\n            if HP >= maxHP then color = \"#FFFFFF\" -- max health\n            elseif HP <= 0 then color = \"#BB0000\" end -- dead\n\n            local sF = 0.7 + ((1 / dist) * (4 + utils.clamp(maxHP/1000,0,6)))-- * (fs + maxHP / 1000)) --scaleFactor\n\n            -- name and pointer\n            ind = ind +1\n            svgT[ind] = [[\n            <circle style=\"opacity:0.8;fill:none;stroke:]]..color..[[;stroke-width:]]..(1*sF)..[[;stroke-miterlimit:]]..(1*sF)..[[;\" cx=\"]]..sPX..[[\" cy=\"]]..sPY..[[\" r=\"]]..(10*sF)..[[\" />\n            <polyline style=\"opacity:0.8;fill:none;stroke:]]..color..[[;stroke-width:]]..(1*sF)..[[;stroke-miterlimit:]]..(1*sF)..[[;\" points=\"]]..sPX-(10*sF)..[[,]]..sPY-(10*sF)..[[ ]]..sPX-(20*sF)..[[,]]..sPY-(20*sF)..[[ ]]..sPX-(50*sF)..[[,]]..sPY-(20*sF)..[[\"/>\n            <text text-anchor=\"end\" alignment-baseline=\"bottom\" x=\"]]..sPX-(25*sF)..[[\" y=\"]]..sPY-(22*sF)..[[\" style=\"font-size:]]..11*sF..[[px;fill:]]..color..[[\">]]..name..life..[[</text>\n            ]]\n\n            -- health indicator\n            if HP > 0 then\n                local E=HP/maxHP*359.99\n                local F=1\n                if E<180 then F=0 end\n                ind = ind +1\n                svgT[ind] = [[\n                <path style=\"opacity:0.8;fill:none;stroke:]]..color..[[;stroke-width:]]..(3*sF)..[[;stroke-miterlimit:1;\" d=\"M ]]..sPX+(7*sF)*cos((0-90)*pi/180)..[[ ]]..sPY+(7*sF)*sin((0-90)*pi/180)..[[ A ]]..(7*sF)..[[ ]]..(7*sF)..[[ 0 ]]..F..[[ 1 ]]..sPX+(7*sF)*cos((E-90)*pi/180)..[[ ]]..sPY+(7*sF)*sin((E-90)*pi/180)..[[\"/>\n                ]]\n            else\n                ind = ind +1\n                svgT[ind] = [[\n                <polyline style=\"opacity:0.8;fill:none;stroke:]]..color..[[;stroke-width:]]..(3*sF)..[[;stroke-miterlimit:1;\" points=\"]]..sPX-(6*sF)..[[,]]..sPY-(6*sF)..[[ ]]..sPX+(6*sF)..[[,]]..sPY+(6*sF)..[[\"/>\n                <polyline style=\"opacity:0.8;fill:none;stroke:]]..color..[[;stroke-width:]]..(3*sF)..[[;stroke-miterlimit:1;\" points=\"]]..sPX+(6*sF)..[[,]]..sPY-(6*sF)..[[ ]]..sPX-(6*sF)..[[,]]..sPY+(6*sF)..[[\"/>\n                ]]\n            end\n        end\n\n\n    end\nend\nind = ind +1\nsvgT[ind] = '</svg></div>'\nlocal html = concat(svgT)\nsystem.setScreen(html)\n","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"1"},{"code":"showFullHp = not showFullHp","filter":{"args":[{"value":"lalt"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"2"}],"methods":[],"events":[]}
